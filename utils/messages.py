"""
- bot messages dictionary with the same phrases in the different languages
"""

import pandas as pd

MESSAGE_COLUMNS = {
    'ru': ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞', '–ñ–∞–Ω—Ä—ã', '–°—Ç—Ä–∞–Ω–∞']
    , 'en': ['Name', 'Description', 'KP rating', 'Genres', 'Country']
}
DATABASE_COLUMNS = {'ru': ['Name', 'Description', 'KP rating', 'Genres', 'Country']
                    , 'en': ['Alternative name', 'Description_en', 'KP rating', 'Genres_en', 'Country_en']}

UNSUCCESSFUL_MESSAGE = {
    'ru': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–æ—Ä–∞–º—ã, –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–ø–æ–∑–∂–µ ü•∫'
    , 'en': "Unfortunately I can't find a good K-drama for you now, you can try again a little later ü•∫"
}


def start(name: str, language: str) -> str:
    if language == 'en':
        return f"I'm glad to see you here, {name}! üíñ\n\n" \
               f"*What I can do:*\n" \
               f"üîπ /last - I'll send links to the 5 best recent dramas\n" \
               f"üîπ /random - I'll send you a link to a random drama\n" \
               f"üîπ /select - I'll find the dramas according to your request, " \
               f"taking into account their genre, year and country\n" \
               f"üîπ /info - developer's contact  ‚úçÔ∏è\n\n"
    else:
        return f'–†–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å, {name}! üíñ \n\n' \
               f'*–ß—Ç–æ —è —É–º–µ—é: * \n' \
               f'üîπ /last - –æ—Ç–ø—Ä–∞–≤–ª—é —Å—Å—ã–ª–∫–∏ –Ω–∞ 5 –ª—É—á—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Ä–∞–º\n' \
               f'üîπ /random - –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Ä–∞–º—É\n' \
               f'üîπ /select - –Ω–∞–π–¥—É –¥–æ—Ä–∞–º—ã –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É, —É—á–∏—Ç—ã–≤–∞—è –∏—Ö –∂–∞–Ω—Ä, –≥–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É\n' \
               f'üîπ /info - –∫–æ–Ω—Ç–∞–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏—Ü—ã ‚úçÔ∏è\n\n'


def info(language: str) -> str:
    if language == 'en':
        return f"I hope my Ji Hyun was helpful!\n" \
               f"If you have any suggestions _(I'm really looking forward to it)_, " \
               f"questions or complaints, then you can text me here: @sepofia2.\n\n" \
               f"_Now let's stock up on ramen and enjoy watching the best K-dramas!_ üçúüíõ"
    else:
        return f'–ù–∞–¥–µ—é—Å—å –º–æ—è –î–∂–∏ –•—ë–Ω –æ–∫–∞–∑–∞–ª–∞—Å—å –ø–æ–ª–µ–∑–Ω–æ–π!\n' \
               f'–ù—É –∞ –µ—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ª—é–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è _(–æ—á–µ–Ω—å –±—É–¥—É —Ä–∞–¥–∞)_, ' \
               f'–≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∂–∞–ª–æ–±—ã, —Ç–æ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ —Ç–≥: @sepofia2\n\n' \
               f'_–¢–µ–ø–µ—Ä—å - –∑–∞–ø–∞—Å–∞–µ–º—Å—è —Ä–∞–º—ë–Ω–æ–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–µ–º—Å—è –ª—É—á—à–∏–º–∏ –¥–æ—Ä–∞–º–∞–º–∏! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!_ üçúüíõ'


def get_text_item(drama: pd.DataFrame, language: str, flag_short: bool=False) -> list[str]:
    items = []
    for j, (mes_col, db_col) in enumerate(zip(MESSAGE_COLUMNS['en'], DATABASE_COLUMNS[language])):
        if mes_col == 'Name':
            item = f'[{drama[db_col]}]({drama["Link"]})'
        else:
            if drama[db_col] is None or (flag_short and db_col.startswith('Desc')):
                continue
            item = f'*{MESSAGE_COLUMNS[language][j]}*: _{drama[db_col]}_'
        items.append(item)
    return items


def random_drama(drama: pd.DataFrame | pd.Series, language: str) -> str:
    if (drama is None) or (len(drama) == 0):
        return UNSUCCESSFUL_MESSAGE[language]

    header = {
        'ru': '–ó–¥–µ—Å—å —Ç–≤–æ—è —Å–ª—É—á–∞–π–Ω–∞—è –¥–æ—Ä–∞–º–∞:\n'
        , 'en': 'Here is your random K-drama:\n'
    }

    if language not in ['ru', 'en']:
        language = 'ru'

    text_items = [header[language]]
    text_items.extend(get_text_item(drama, language))
    text_items.append('')
    return '\n'.join(text_items)


def last_dramas(dramas_df: pd.DataFrame, language: str) -> str:
    if len(dramas_df) == 0:
        return UNSUCCESSFUL_MESSAGE[language]

    header = {
        'ru': '–ó–¥–µ—Å—å 5 –ª—É—á—à–∏—Ö –∫–æ—Ä–µ–π—Å–∫–∏—Ö –¥–æ—Ä–∞–º –∏–∑ –Ω–µ–¥–∞–≤–Ω–æ –≤—ã–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞:\n'
        , 'en': 'Here are 5 best last K-dramas by Kinopoisk rating:\n'
    }

    if language not in ['ru', 'en']:
        language = 'ru'

    text_items = [header[language]]
    for ind in dramas_df.index:
        text_items.extend(get_text_item(dramas_df.iloc[ind], language))
        text_items.append('')
    return '\n'.join(text_items)


def user_dramas(dramas_df: pd.DataFrame | None, language: str) -> str:
    if (dramas_df is None) or (len(dramas_df) == 0):
        return UNSUCCESSFUL_MESSAGE[language]

    header = {
        'ru': '–î–æ—Ä–∞–º—ã –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n'
        , 'en': 'K-dramas for your query:\n'
    }

    if language not in ['ru', 'en']:
        language = 'ru'

    text_items = [header[language]]
    text_items_short = [header[language]]

    for i, ind in enumerate(dramas_df.index):
        text_items.extend(get_text_item(dramas_df.iloc[ind], language))
        text_items_short.extend(get_text_item(dramas_df.iloc[ind], language, True))
        text_items.append('')
        text_items_short.append('')

    text = '\n'.join(text_items)
    text_short = '\n'.join(text_items_short)
    return text if len(text) < 4096 else text_short


def select(language: str) -> str:
    text = {
        'ru': '–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –¥–æ—Ä–∞–º—É –ø–æ —Ç–≤–æ–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º! –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:'
              '\n_–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É_ /cancel.\n'
        , 'en': "Let's choose K-dramas especially for you! First, choose a genre:"
                "\n_Send the_ /cancel _command to stop._"
    }
    if language not in ['ru', 'en']:
        language = 'ru'

    return text[language]


def genre(language: str) -> str:
    text = {
        'ru': '–ó–∞–ø–æ–º–Ω–∏–ª–∞! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:'
              '\n_–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É_ /cancel.\n'
        , 'en': 'Memorize! Now select a minimum production year:'
                '\n_Send the_ /cancel _command to stop._'
    }
    if language not in ['ru', 'en']:
        language = 'ru'

    return text[language]


def year(language: str) -> str:
    text = {
        'ru': '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω—É:'
              '\n_–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É_ /cancel.\n'
        , 'en': 'Great! Then specify the county:'
                '\n_Send the_ /cancel _command to stop._'
    }
    if language not in ['ru', 'en']:
        language = 'ru'

    return text[language]


def country(language: str) -> str:
    text = {
        'ru': '–°–∫–æ–ª—å–∫–æ –¥–æ—Ä–∞–º –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏?'
              '\n_–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É_ /cancel.\n'
        , 'en': 'How many K-drams do you want?'
                '\n_Send the_ /cancel _command to stop._'
    }
    if language not in ['ru', 'en']:
        language = 'ru'

    return text[language]


def count(language: str) -> str:
    text = {
        'ru': '–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Ä–∞–º—ã —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω—ã–µ?'
        , 'en': "And the last question: do you want to get the highest rated K-dramas or just random ones?"
    }
    if language not in ['ru', 'en']:
        language = 'ru'

    return text[language]


def cancel(language: str) -> str:
    text = {
        'ru': '–ù–µ –≤–æ–ø—Ä–æ—Å ;) \n–í—ã–±–µ—Ä–µ–º –¥–æ—Ä–∞–º—ã –¥–ª—è —Ç–µ–±—è –∫–∞–∫-–Ω–∏–±—É–¥—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑!'
        , 'en': "Ok! We can choose K-dramas for you at any time ;)"
    }
    if language not in ['ru', 'en']:
        language = 'ru'

    return text[language]


def incorrect_message(language: str):
    if language == 'en':
        text = "Sorry, I don't understand your message üëÄ \nTry to use commands from menu"
    else:
        text = '–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É üëÄ \n–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é'
    return text


def text_message(context: str, language: str):
    if '—Å–ø–∞—Å–∏–±–æ' in context.lower():
        text = '–†–∞–¥–∞, —á—Ç–æ —Å–º–æ–≥–ª–∞ –ø–æ–º–æ—á—å ü´∂'
    elif 'thank' in context.lower():
        text = "I was happy to help you ü´∂"
    else:
        return incorrect_message(language)
    return text


def update_database_message(flag_access: bool):
    if flag_access:
        return "Database is successfully updated!"
    return "You are not my developer üíÖ"
